name: CI for github actions v3

on:
  push:
    branches:
    - "*"  # run for branches
    tags:
    - "*"  # run for tags

#
#    branches: [main]

jobs:

  scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so follow-up steps can access it
      - uses: actions/checkout@v3

      - name: Checkov GitHub Action
        uses: bridgecrewio/checkov-action@v12
        env:
          PRISMA_API_URL: https://app.prismacloud.io
        with:
          api-key: ${{ secrets.BC_API_KEY }}
          # This will add both a CLI output to the console and create a results.sarif file
          output_format: cli,sarif
          output_file_path: console,results.sarif
        
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        
        # Results are generated only on a success or failure
        # this is required since GitHub by default won't run the next step
        # when the previous one has failed. Security checks that do not pass will 'fail'.
        # An alternative is to add `continue-on-error: true` to the previous step
        # Or 'soft_fail: true' to checkov.
        if: success() || failure()
        with:
          sarif_file: results.sarif

  #
  #
  #check complete demo is in sync with individual manifest, it should block fom merge. Should this be a diferent file?
  complete-demo-sync-check:
    runs-on: ubuntu-latest
    env:
      COMPLETE_DEMO_ARGS: --rm -v ${{ github.workspace }}:/workdir
      COMPLETE_DEMO_DIR: 'deploy/kubernetes/'
      COMPLETE_DEMO_IMAGE: 'manifests-image'
    steps:
    - uses: actions/checkout@v2

 
    #
    # Build image
    - name: Build image
      env:
        DOCKER_BUILDKIT: 1
      run: docker build -t $COMPLETE_DEMO_IMAGE $COMPLETE_DEMO_DIR

    - name: Prisma Cloud image scan
      id: scan
      uses: PaloAltoNetworks/prisma-cloud-scan@v1
      with:
        pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
        pcc_user: ${{ secrets.PCC_USER }}
        pcc_pass: ${{ secrets.PCC_PASS }}
        image_name: 'docker.io/library/manifests-image'
        
    #
    #
    # Check that manifest and complete-demo.yaml ahve the same content
    - name: check comeplte-demo.yaml content sync
      run: docker run $COMPLETE_DEMO_ARGS $COMPLETE_DEMO_IMAGE make -C $COMPLETE_DEMO_DIR check-complete-demo

  #
  #
  #check that we can deploy complete-demo
  #NOTE: what about docker compose? maybe doesn't make sense if we use the KIND action
  #NOTE: later we can test that the documentation is tested, as in previous cronjobs in travis
  deployments-tests:
    needs: complete-demo-sync-check
    runs-on: ubuntu-latest
    env:
      kind-version: 'v0.10.0'
      kind-image: 'kindest/node:v1.20.0'
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: Start KinD
      uses: engineerd/setup-kind@v0.5.0
      with:
        version: ${{ env.kind-version }}
        image: ${{ env.kind-image }}
    - name: Wait cluster to start
      run: |
        until [ "$(kubectl get pods -A --no-headers | grep -cEv '([0-9]+)/\1')" -eq 0 ]; do
            sleep 5s
        done
        kubectl get pod -A
    - name: Run and test Complete demo
      run: |
        kubectl apply -f deploy/kubernetes/complete-demo.yaml
        until [ "$(kubectl get pods -n sock-shop --no-headers | grep -cEv '([0-9]+)/\1')" -eq 0 ]; do
            sleep 5s
            kubectl get pods -n sock-shop
            kubectl describe node | grep "Allocated resources" -A 10
        done
        kubectl get pod -A

  #
  #
  #build openapi and healtcheck images
  build-test-images:
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      GROUP: weaveworksdemos 
    strategy:
      matrix:
        repo: ["openapi", "healthcheck"]
    steps:
    - uses: actions/checkout@v2

    #
    #
    # Push to dockerhub
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{ matrix.repo }}
        push: true
        tags: ${{ env.GROUP }}/${{ matrix.repo }}:${{ github.sha }}
